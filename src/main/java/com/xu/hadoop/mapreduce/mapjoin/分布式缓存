3）案例实操
1）使用场景：一张表十分小、一张表很大。
2）解决方案
在 map 端缓存多张表，提前处理业务逻辑，这样增加 map 端业务，减少 reduce 端数据
的压力，尽可能的减少数据倾斜。
3）具体办法：采用 distributedcache
 （1）在 mapper 的 setup 阶段，将文件读取到缓存集合中。
 （2）在驱动函数中加载缓存。
job.addCacheFile(new URI("file:/e:/mapjoincache/pd.txt"));// 缓存普通文件到 task 运行节点

分析
适用于关联表中有小表的情形；
可以将小表分发到所有的 map 节点，这样，map 节点就可以在本地对自己所读到的大
表数据进行合并并输出最终结果，可以大大提高合并操作的并发度，加快处理速度。